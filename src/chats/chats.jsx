import './Chats.scss';
import ChatElement from "./chatElement.jsx";
import {useEffect, useState, useRef} from "react";

function Chats() {
    const token = localStorage.getItem('token');
    const [chats, setChats] = useState([]);
    const [selectedChat, setSelectedChat] = useState(null);
    const [selectedChatData, setSelectedChatData] = useState(null);
    const [messages, setMessages] = useState([]);
    const [loading, setLoading] = useState(false);
    const [myId, setMyId] = useState(0);
    const [messageText, setMessageText] = useState('');
    const [isConnected, setIsConnected] = useState(false);
    const [typingUsers, setTypingUsers] = useState({});

    const ws = useRef(null);
    const reconnectTimeout = useRef(null);
    const isInitialized = useRef(false);
    const messagesEndRef = useRef(null);
    const typingTimeoutRef = useRef({});
    const lastTypingSentRef = useRef(0);
    const TYPING_DEBOUNCE = 10000;

    // –∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useEffect(() => {
        const fetchChats = async () => {
            if (!token) return;

            try {
                const [meRes, chatsRes] = await Promise.all([
                    fetch('https://garantbe.ru/accounts/me/', {
                        headers: { 'Authorization': `Bearer ${token}` }
                    }),
                    fetch('https://garantbe.ru/chats/?limit=20', {
                        headers: { 'Authorization': `Bearer ${token}` }
                    })
                ]);

                const meData = await meRes.json();
                const chatsData = await chatsRes.json();

                setMyId(meData.id);
                setChats(chatsData.results || []);

                if (!isInitialized.current) {
                    initializeWebSocket();
                    isInitialized.current = true;
                }

            } catch (e) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤:", e);
            }
        };

        fetchChats();
        return () => {
            ws.current?.close();
            clearTimeout(reconnectTimeout.current);
        };
    }, [token]);

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∫–µ—Ç–∞
    const initializeWebSocket = () => {
        if (!token) return;
        ws.current = new WebSocket(`wss://garantbe.ru/ws/user_chats/?token=${token}`);

        ws.current.onopen = () => {
            console.log("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω");
            setIsConnected(true);
            if (selectedChat) joinChat(selectedChat);
        };

        ws.current.onmessage = (e) => {
            let data;
            try {
                data = JSON.parse(e.data);
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:", err);
                return;
            }

            console.log("üì© –ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ WS:", data);
            handleWebSocketMessage(data);
        };

        ws.current.onclose = () => {
            console.warn("‚ö†Ô∏è WebSocket –∑–∞–∫—Ä—ã—Ç, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...");
            setIsConnected(false);
            reconnectTimeout.current = setTimeout(initializeWebSocket, 3000);
        };

        ws.current.onerror = (err) => {
            console.error("–û—à–∏–±–∫–∞ WebSocket:", err);
            setIsConnected(false);
        };
    };

    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    const handleWebSocketMessage = (data) => {
        switch (data.type) {
            case "chat_message":
                if (data.message.chat_id === selectedChat) {
                    setMessages(prev => {
                        const exists = prev.some(m => m.id === data.message.id);
                        if (exists) return prev;
                        return [...prev, data.message].sort((a, b) => new Date(a.created_at) - new Date(b.created_at));
                    });
                }
                break;
            case "typing":
                if (data.chat_id === selectedChat && data.user_id !== myId) {
                    setTypingUsers(prev => ({
                        ...prev,
                        [data.user_id]: { timestamp: Date.now() }
                    }));
                    clearTimeout(typingTimeoutRef.current[data.user_id]);
                    typingTimeoutRef.current[data.user_id] = setTimeout(() => {
                        setTypingUsers(prev => {
                            const updated = { ...prev };
                            delete updated[data.user_id];
                            return updated;
                        });
                    }, 3000);
                }
                break;
            default:
                console.log("üü° –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:", data.type);
        }
    };

    // –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Å–æ–∫–µ—Ç—É
    const sendWebSocketAction = (action, payload = {}) => {
        if (ws.current?.readyState === WebSocket.OPEN) {
            const msg = { action, ...payload };
            ws.current.send(JSON.stringify(msg));
            console.log("‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ:", msg);
            return true;
        } else {
            console.error("‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
            return false;
        }
    };

    const joinChat = (chatId) => {
        if (!chatId) return;
        sendWebSocketAction("join_chat", { chat_id: chatId });
    };

    // –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    const fetchMessages = async (chatId) => {
        if (!token) return;
        setLoading(true);
        try {
            const res = await fetch(`https://garantbe.ru/chats/${chatId}/messages/`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            const data = await res.json();
            setMessages((data.results || []).sort((a, b) => new Date(a.created_at) - new Date(b.created_at)));
            setSelectedChat(chatId);
            joinChat(chatId);
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:", e);
        } finally {
            setLoading(false);
        }
    };

    const handleChatSelect = (chatId) => {
        fetchMessages(chatId);
    };

    // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sendMessage = () => {
        if (!messageText.trim() || !selectedChat) return;
        const text = messageText.trim();

        const sent = sendWebSocketAction("send_message", {
            chat_id: selectedChat,
            text
        });

        if (sent) {
            // –ª–æ–∫–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –æ—Ç–æ–±—Ä–∞–∑–∏–ª–æ—Å—å
            const tempMsg = {
                id: `temp-${Date.now()}`,
                chat_id: selectedChat,
                sender_id: myId,
                text,
                created_at: new Date().toISOString(),
            };
            setMessages(prev => [...prev, tempMsg]);
            setMessageText('');
        }
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    };

    const handleInputChange = (e) => {
        const value = e.target.value;
        setMessageText(value);
        if (value.trim().length > 0) sendTyping(true);
    };

    const sendTyping = (isTyping = true) => {
        if (!selectedChat) return;
        const now = Date.now();
        if (isTyping && now - lastTypingSentRef.current < TYPING_DEBOUNCE) return;
        lastTypingSentRef.current = now;
        sendWebSocketAction("typing", { chat_id: selectedChat, is_typing: isTyping });
    };

    const typingText =
        Object.keys(typingUsers).length > 0 ? "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–µ—á–∞—Ç–∞–µ—Ç..." : null;

    return (
        <div className="chats">
            <div className="chats__container">
                <div className="chats__logo">
                    <img className="chats__logo-image" src="/public/mini-logo.svg" alt=""/>
                    <p className="chats__logo-name">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</p>
                </div>

                <div className="chats__list">
                    {chats.map(chat => (
                        <ChatElement
                            key={chat.id}
                            chat={chat}
                            isSelected={selectedChat === chat.id}
                            onSelect={() => handleChatSelect(chat.id)}
                        />
                    ))}
                </div>

                <div className={`websocket-status ${isConnected ? 'connected' : 'disconnected'}`}>
                    {isConnected ? 'Connected' : 'Disconnected'}
                </div>
            </div>

            <div className="chats__window">
                {selectedChat ? (
                    <>
                        <div className="chats__messages">
                            {messages.map(m => (
                                <div
                                    key={m.id}
                                    className={`message ${m.sender_id === myId ? 'message--own' : 'message--other'}`}
                                >
                                    <div className="message__content">
                                        <div className="message__text">{m.text}</div>
                                        <div className="message__time">
                                            {new Date(m.created_at).toLocaleTimeString()}
                                        </div>
                                    </div>
                                </div>
                            ))}
                            {typingText && <div className="typing-indicator">{typingText}</div>}
                            <div ref={messagesEndRef}/>
                        </div>

                        <div className="chats__input">
                            <input
                                className="chats__input-row"
                                placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ..."
                                value={messageText}
                                onChange={handleInputChange}
                                onKeyPress={handleKeyPress}
                            />
                            <button
                                className="chats__input-sent"
                                onClick={sendMessage}
                                disabled={!messageText.trim()}
                            >
                                ‚û§
                            </button>
                        </div>
                    </>
                ) : (
                    <div className="select-chat">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</div>
                )}
            </div>
        </div>
    );
}

export default Chats;
